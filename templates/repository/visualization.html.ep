% title 'Visualizations for repository...';
% layout 'svg';

<div id="sidebar">
  <div id="toolbar">
    <select id="order">
      <option value="index">Ordenar pelo índice na matriz</option>
      <option value="name">Ordenar por ordem alfabética</option>
      <option value="directory">Ordenar por grupo (directory)</option>
    </select>

    <button id='zoom' class='btn btn-block' data-toggle='button' type='button'><i class='icon-zoom-in'></i> ZOOM</button>
  </div>

  <table id="informations">
    <tr><td><strong>Repository:</strong></td></tr>
    <tr><td><%= $url %></tr></td>
    <tr><td><strong>Total of files:</strong></td></tr>
    <tr><td><%= $total_files %></tr></td>
    <tr><td><strong>Total lines of code metric:</strong></td></tr>
    <tr><td><%= $metrics->{total_loc} %></tr></td>
    <tr><td><strong>Change cost metric:</strong></td></tr>
    <tr><td><%= $metrics->{change_cost} %></tr></td>
    <tr><td><strong>LCOM4 mean metric:</strong></td></tr>
    <tr><td><%= sprintf("%.2f", $metrics->{lcom4_mean}) %></tr></td>
  </table>

</div>

<script>
var margin = {top: 20, right: 10, bottom: 10, left: 10};
var width = height = $(window).height() - (margin.top + margin.bottom);

var x = d3.scale.ordinal().rangeBands([0, width]);
var z = d3.scale.linear().domain([0, 4]).clamp(true);
var c = d3.scale.category10().domain(d3.range(10));

var density = Math.ceil((<%= $total_files %> / (height - margin.top - margin.bottom)) * 15);
var dense = density > 5;

var svg = d3.select("#content").append("svg");

var matrix = svg.append("g")
  .attr("class", function(d) { return dense ? "matrix dense" : "matrix"; })
  .attr("width", width)
  .attr("height", height)
  .attr("transform", "translate(" + ($(window).width() - width - margin.right) + "," + margin.top + ")");

var brush = d3.svg.brush()
  .x(d3.scale.identity().domain([0, width]))
  .y(d3.scale.identity().domain([0, height]))
  .extent([[100, 100], [200, 200]]);

var dataset_filename = "/json/<%= $url_sha1 %>/dsm";

d3.json(dataset_filename, function(dataset) {
  var elements = [];
  var nodes = dataset.nodes;
  var n = nodes.length;

  // Compute index per node.
  nodes.forEach(function(node, i) {
    node.index = i;
    elements[i] = d3.range(n).map(function(j) { return {x: j, y: i, z: 0}; });
  });

  // Convert links to matrix;
  dataset.links.forEach(function(link) {
    elements[link.source][link.target].z = link.value;
  });

  // Precompute the orders.
  var orders = {
    name: d3.range(n).sort(function(a, b) { return d3.ascending(nodes[a].name, nodes[b].name); }),
    group: d3.range(n).sort(function(a, b) { return nodes[b].group - nodes[a].group; }),
    directory: d3.range(n).sort(function(a, b) { return d3.ascending(nodes[a].directory, nodes[b].directory); }),
    index: d3.range(n).sort(function(a, b) { return nodes[a].index - nodes[b].index; }),
  };

  // The default sort order.
  x.domain(orders.index);

  matrix.append("rect")
    .attr("class", "background")
    .attr("transform", "translate(-2, -2)")
    .attr("width", width + 4)
    .attr("height", height + 4);

  var row = matrix.selectAll(".row")
    .data(elements)
    .enter().append("g")
      .attr("class", "row")
      .attr("transform", function(d, i) { return "translate(0," + x(i) + ")"; })
      .each(row);

  row.append("line")
    .attr("x2", width);

  row.append("text")
    .attr("x", -6)
    .attr("y", x.rangeBand() / 2)
    .attr("dy", ".32em")
    .attr("text-anchor", "end")
    .text(function(d, i) { return ((i % density == 0) ? nodes[i].name + " [" + i + "]" : ""); });

  var column = matrix.selectAll(".column")
    .data(elements)
    .enter().append("g")
      .attr("class", "column")
      .attr("transform", function(d, i) { return "translate(" + x(i) + ")rotate(-90)"; });

  column.append("line")
    .attr("x1", -width);

  column.append("text")
    .attr("x", 2)
    .attr("y", -10)
    .attr("dy", ".32em")
    .attr("text-anchor", "start")
    .attr("transform", function(d, i) { return "translate(0)rotate(90)"; })
    .text(function(d, i) { return ((i % density == 0) ? nodes[i].index : ""); });

  function row(row) {
    var cell = d3.select(this).selectAll(".cell")
      .data(row.filter(function(d) { return d.z; }))
      .enter().append("rect")
        .attr("class", "cell")
        .attr("x", function(d) { return x(d.x); })
        .attr("width", x.rangeBand())
        .attr("height", x.rangeBand())
        .style("fill", function(d) { return nodes[d.x].group == nodes[d.y].group ? c(nodes[d.x].group) : 'black'; })
        .on("mouseover", mouseover)
        .on("mouseout", mouseout);
    if (dense) {
      cell.style("stroke", function(d) { return nodes[d.x].group == nodes[d.y].group ? c(nodes[d.x].group) : 'black'; });
    }
    cell.append('title')
      .text(function(d) {
        return "<div class='callee'>" +
          nodes[d.x].name +
          "</div><span><i class='icon-arrow-up muted'></i></span><div class='caller'>" +
          nodes[d.y].name +
          "</div>";
      });
  }

  function mouseover(p) {
    d3.selectAll(".row text").classed("active", function(d, i) { return i == p.y; });
    d3.selectAll(".column text").classed("active", function(d, i) { return i == p.x; });
  }

  function mouseout() {
    d3.selectAll("text").classed("active", false);
  }

  function order(value) {
    x.domain(orders[value]);
    var t = matrix.transition().duration(2500);
    t.selectAll(".row")
      .delay(function(d, i) { return x(i) * 4; })
      .attr("transform", function(d, i) { return "translate(0," + x(i) + ")"; })
      .selectAll(".cell")
        .delay(function(d) { return x(d.x) * 4; })
        .attr("x", function(d) { return x(d.x); });
    t.selectAll(".column")
      .delay(function(d, i) { return x(i) * 4; })
      .attr("transform", function(d, i) { return "translate(" + x(i) + ")rotate(-90)"; });
  }

  $('svg rect').tipsy({
    gravity: $.fn.tipsy.autoWE,
    html: true,
    opacity: 0.9,
  });

  d3.select("#order").on("change", function() {
    order(this.value);
  });

  d3.select("#zoom").on("click", function() {
    var zoom_is_active = d3.select(this).classed('active');
    if (zoom_is_active) {
      d3.select("#brush").remove();
    }
    else {
      matrix.append("g")
        .attr("id", "brush")
        .call(brush);
    }
  });

});
</script>
